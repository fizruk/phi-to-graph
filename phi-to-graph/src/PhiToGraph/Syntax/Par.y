-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module PhiToGraph.Syntax.Par
  ( happyError
  , myLexer
  , pTerm
  , pListTerm
  , pCommands
  , pCommand
  , pListCommand
  , pRules
  , pRule
  , pListRule
  ) where

import Prelude

import qualified PhiToGraph.Syntax.Abs
import PhiToGraph.Syntax.Lex

}

%name pTerm Term
%name pListTerm ListTerm
%name pCommands Commands
%name pCommand Command
%name pListCommand ListCommand
%name pRules Rules
%name pRule Rule
%name pListRule ListRule
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '--' { PT _ (TS _ 4) }
  '->' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  'ADD' { PT _ (TS _ 7) }
  'BIND' { PT _ (TS _ 8) }
  '[' { PT _ (TS _ 9) }
  ']' { PT _ (TS _ 10) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident :: { PhiToGraph.Syntax.Abs.Ident }
Ident  : L_Ident { PhiToGraph.Syntax.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Term :: { PhiToGraph.Syntax.Abs.Term }
Term : Ident { PhiToGraph.Syntax.Abs.TermAttr $1 }
     | Ident '->' Term { PhiToGraph.Syntax.Abs.TermMap $1 $3 }
     | '[' ListTerm ']' { PhiToGraph.Syntax.Abs.TermObj $2 }

ListTerm :: { [PhiToGraph.Syntax.Abs.Term] }
ListTerm : {- empty -} { [] }
         | Term { (:[]) $1 }
         | Term ',' ListTerm { (:) $1 $3 }

Commands :: { PhiToGraph.Syntax.Abs.Commands }
Commands : ListCommand { PhiToGraph.Syntax.Abs.Commands $1 }

Command :: { PhiToGraph.Syntax.Abs.Command }
Command : 'ADD' '(' Integer ')' { PhiToGraph.Syntax.Abs.CommandAdd $3 }
        | 'BIND' '(' Integer ',' Integer ',' Ident ')' { PhiToGraph.Syntax.Abs.CommandBind $3 $5 $7 }

ListCommand :: { [PhiToGraph.Syntax.Abs.Command] }
ListCommand : {- empty -} { [] }
            | Command { (:[]) $1 }
            | Command ',' ListCommand { (:) $1 $3 }

Rules :: { PhiToGraph.Syntax.Abs.Rules }
Rules : ListRule { PhiToGraph.Syntax.Abs.Rules $1 }

Rule :: { PhiToGraph.Syntax.Abs.Rule }
Rule : Term '--' Ident '->' Commands { PhiToGraph.Syntax.Abs.Rule $1 $3 $5 }

ListRule :: { [PhiToGraph.Syntax.Abs.Rule] }
ListRule : {- empty -} { [] }
         | Rule { (:[]) $1 }
         | Rule ';' ListRule { (:) $1 $3 }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

