-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Syntax.

module PhiToGraph.Syntax.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Term = TermAttr Ident | TermMap Ident Term | TermObj [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Commands = Commands [Command]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Command
    = CommandAdd Integer | CommandBind Integer Integer Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Rules = Rules [Rule]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Rule = Rule Term Ident Commands
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

