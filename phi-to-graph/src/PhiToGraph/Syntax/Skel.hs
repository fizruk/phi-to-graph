-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module PhiToGraph.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified PhiToGraph.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: PhiToGraph.Syntax.Abs.Ident -> Result
transIdent x = case x of
  PhiToGraph.Syntax.Abs.Ident string -> failure x

transTerm :: PhiToGraph.Syntax.Abs.Term -> Result
transTerm x = case x of
  PhiToGraph.Syntax.Abs.TermAttr ident -> failure x
  PhiToGraph.Syntax.Abs.TermMap ident term -> failure x
  PhiToGraph.Syntax.Abs.TermObj terms -> failure x

transCommands :: PhiToGraph.Syntax.Abs.Commands -> Result
transCommands x = case x of
  PhiToGraph.Syntax.Abs.Commands commands -> failure x

transCommand :: PhiToGraph.Syntax.Abs.Command -> Result
transCommand x = case x of
  PhiToGraph.Syntax.Abs.CommandAdd integer -> failure x
  PhiToGraph.Syntax.Abs.CommandBind integer1 integer2 ident -> failure x

transRules :: PhiToGraph.Syntax.Abs.Rules -> Result
transRules x = case x of
  PhiToGraph.Syntax.Abs.Rules rules -> failure x

transRule :: PhiToGraph.Syntax.Abs.Rule -> Result
transRule x = case x of
  PhiToGraph.Syntax.Abs.Rule term ident commands -> failure x
